\nfrom __future__ import annotations\nimport os\nfrom typing import Any, Dict, Optional\nimport yaml\n\nclass SkillsReloader:\n    """YAML skills hot-reloader."""\n\n    def __init__(self, path: str) -> None:\n        self.path = path\n        self._mtime: float = 0.0\n        self._doc: Dict[str, Any] = {"rules": []}\n        self.refresh(force=True)\n\n    def refresh(self, force: bool = False) -> None:\n        try:\n            m = os.path.getmtime(self.path)\n        except OSError:\n            return\n        if force or m > self._mtime:\n            with open(self.path, "r", encoding="utf-8") as f:\n                self._doc = yaml.safe_load(f) or {"rules": []}\n            self._mtime = m\n\n    def match(self, text: str) -> Optional[Dict[str, Any]]:\n        t = text.lower()\n        for rule in self._doc.get("rules", []):\n            terms = [str(x).lower() for x in rule.get("if_contains", [])]\n            if any(term in t for term in terms):\n                return rule\n        return None\n
